@startuml container
!include  https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(Client, "Клиент банка", "Клиент банка, заинтересованный в открытии кредита")
Person(Manager_bo_c, "Сотрудник бэк-офиса кредитов", "Сотрудник компании, который обрабатывает заявки на кредит")

System_Boundary(Bank, "Банк-стандарт"){
    System_Boundary(OnlineCreditSystem, "Система онлайн кредитования", "Система, которая позволяет пользователю взять кредит онлайн"){
        Container(InternetBank, "Интернет-банк (web-interface)", ".NET")
        Container(Site, "Сайт", "PHP, React.js")
        Container_Boundary(BFFLayer, "BFFLayer"){
            Container(SiteBFF, "BFF: Сайт", "PHP")
            Container(InternetBankBFF, "BFF: Интернет-банк", ".NET")
        }
        Container(ApiGateway, "API Gateway", "Spring Cloud Gateway", "Маршрутизация запросов")

        Container(StatementCreditService, "StatementCreditService", "Java Spring", "Обработка заявок на открытие кредита")
        ContainerDb(StatementCreditServiceDB, "StatementCreditServiceDB", "PostgreSQL", "Хранение информации о первичных заявках")

        Container(PreliminaryDecisionService, "PreliminaryDecisionService", "Java Spring", "Сервис предварительных решений")

        Container(ScoringScheduleService, "ScoringScheduleService", "Java Spring", "Сервис периодического предрасчета скоринга")

        Container(RateService, "RateService", "Java Spring", "Обработка депозитных и кредитных ставок, включая персональные")
        ContainerDb(RateServiceDB, "RateServiceDB", "Redis", "Хранение информации о депозитных и кредитных ставках, включая персональные")

        Container(NotificationService, "NotificationService", "Java Spring", "Сервис управления оповещениями")
        ContainerDb(NotificationServiceDB, "NotificationServiceDB", "PostgreSQL", "Хранение информации об оповещениях")
    }

    Container(AuthService, "AuthService", "Java Spring", "Авторизация и аутентификация")
    Container(Kafka, "Kafka", "Kafka", "Шина событий")

    System_Boundary(ABS, "АБС", "Система, которая позволяет регистрировать заявки на кредит из фронт-офиса"){
        Container(ABSEventService, "ABSEventService", "Java Spring", "Сервис взаимодействия с АБС. Rate Limit для защиты АБС")
        Container(ABSDesktop, "Десктопное приложение для сотрудников", "Delphi", "Оформление заявок")
        Container(ABSMiddleware, "АБС Middleware (API)", "Java Spring", "API-Слой")
        ContainerDb(ABSDB, "БД АБС", "Oracle", "Хранение данных АБС")
    }    

    System_Boundary(CreditSystem, "Система кредитования", "Система, которая позволяет обрабатывать заявки клиентов"){
        Container(CreditConv, "Кредитный конвейер", "Java(comunda)", "Рабочее место сотрудников кредитования")
        ContainerDb(CreditConvDB, "CreditConvDB", "Oracle", "Хранение заявок")

        Container(CreditScoringService, "Система кредитного скоринга", "Python", "Определяет рейтинг клиента для выдачи ему кредита")
        ContainerDb(CreditScoringServiceDB, "CreditScoringServiceDB", "PostgreSQL", "Хранение информации для кредитного скоринга")
    }   
    System(Zipkin, "Система трассировок", "Zipkin")
    System(ELK, "Система логирования", "ELK")
    System(Grafana, "Система мониторинга", "Grafana")
}

System_Ext(Telecom, "Телеком-оператор", "Внешний оператор по отправке СМС")
System_Ext(BKI, "Бюро Кредитных Историй", "Внешняя система предоставляющая кредитную историю по человеку")

Rel_D(Client, Site, "Получение информации об условиях кредита, оформление заявки", HTTPS)
Rel_D(Site, SiteBFF, "Вызов API", HTTPS)
Rel_D(SiteBFF, ApiGateway, "Вызов API", HTTPS)
Rel_D(ApiGateway, StatementCreditService, "Маршрутизация запросов", HTTPS)
Rel_D(StatementCreditService, StatementCreditServiceDB, "Чтение/запись", JDBC)
Rel_D(ApiGateway, PreliminaryDecisionService, "Маршрутизация запросов", HTTPS)
Rel_D(PreliminaryDecisionService, BKI, "Получение кредитной истории", HTTPS)
Rel_L(StatementCreditService, Kafka, "Публикация события оформления заявки от неавторизованного пользователя", Kafka Producer)

Rel_L(NotificationService, Kafka, "Получение событий о статусах заявки", Kafka Consumer)
Rel(NotificationService, Telecom, "Отправка СМС-сообщений", Kafka Consumer)
Rel(NotificationService, NotificationServiceDB, "Чтение/запись", JDBC)

@enduml 